unsigned long sdram_init(void *sdram_base, const struct sdram_config *config)
{
8001c2c4:       eb cd 40 80     pushm   r7,lr	r7 and lr to the stack
8001c2c8:       1a 97           mov     r7,sp	stack pointer to r7
8001c2ca:       20 bd           sub     sp,44	make a gap in the stack
8001c2cc:       ef 4c ff f0     st.w    r7[-16],r12	store the parameters
8001c2d0:       ef 4b ff ec     st.w    r7[-20],r11
        unsigned long sdram_size;
        uint32_t cfgreg;
        unsigned int i;

        hmatrix_write(SFR[5], hmatrix_read(SFR[5]) | 1);
8001c2d4:       fe 69 10 00     mov     r9,-126976	//This is the hmatrix base 0xfffe1000
8001c2d8:       fe 68 10 00     mov     r8,-126976
8001c2dc:       f0 f8 01 24     ld.w    r8,r8[292]	//load the value of SFR5 to r8
8001c2e0:       a1 a8           sbr     r8,0x0		//set bit 0 in r8
8001c2e2:       f3 48 01 24     st.w    r9[292],r8	//store r8 in SFR5
        hmatrix_read(SFR[5]);
8001c2e6:       fe 68 10 00     mov     r8,-126976
8001c2ea:       f0 f8 01 24     ld.w    r8,r8[292]

        cfgreg = (SDRAMC_BF(NC, config->col_bits - 8)
8001c2ee:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c2f2:       11 d8           ld.ub   r8,r8[0x5]
8001c2f4:       20 88           sub     r8,8
8001c2f6:       f3 d8 c0 02     bfextu  r9,r8,0x0,0x2
8001c2fa:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c2fe:       11 c8           ld.ub   r8,r8[0x4]
8001c300:       20 b8           sub     r8,11
8001c302:       f1 d8 c0 02     bfextu  r8,r8,0x0,0x2
8001c306:       a3 68           lsl     r8,0x2
8001c308:       10 49           or      r9,r8
8001c30a:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c30e:       11 e8           ld.ub   r8,r8[0x6]
8001c310:       20 18           sub     r8,1
8001c312:       f1 d8 c0 01     bfextu  r8,r8,0x0,0x1
8001c316:       a5 68           lsl     r8,0x4
8001c318:       10 49           or      r9,r8
8001c31a:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c31e:       11 f8           ld.ub   r8,r8[0x7]
8001c320:       f1 d8 c0 02     bfextu  r8,r8,0x0,0x2
8001c324:       a5 78           lsl     r8,0x5
8001c326:       10 49           or      r9,r8
8001c328:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c32c:       f1 38 00 08     ld.ub   r8,r8[8]
8001c330:       f1 d8 c0 04     bfextu  r8,r8,0x0,0x4
8001c334:       a9 68           lsl     r8,0x8
8001c336:       10 49           or      r9,r8
8001c338:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c33c:       f1 38 00 09     ld.ub   r8,r8[9]
8001c340:       ad 68           lsl     r8,0xc
8001c342:       f1 d8 c0 10     bfextu  r8,r8,0x0,0x10
8001c346:       10 49           or      r9,r8
8001c348:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c34c:       f1 38 00 0a     ld.ub   r8,r8[10]
8001c350:       f1 d8 c0 04     bfextu  r8,r8,0x0,0x4
8001c354:       b1 68           lsl     r8,0x10
8001c356:       10 49           or      r9,r8
8001c358:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c35c:       f1 38 00 0b     ld.ub   r8,r8[11]
8001c360:       f1 d8 c0 04     bfextu  r8,r8,0x0,0x4
8001c364:       b5 68           lsl     r8,0x14
8001c366:       10 49           or      r9,r8
8001c368:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c36c:       f1 38 00 0c     ld.ub   r8,r8[12]
8001c370:       f1 d8 c0 04     bfextu  r8,r8,0x0,0x4
8001c374:       b9 68           lsl     r8,0x18
8001c376:       10 49           or      r9,r8
8001c378:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c37c:       f1 38 00 0d     ld.ub   r8,r8[13]
8001c380:       bd 68           lsl     r8,0x1c
8001c382:       f3 e8 10 08     or      r8,r9,r8
8001c386:       ef 48 ff f8     st.w    r7[-8],r8
                       | SDRAMC_BF(TRP, config->trp)
                       | SDRAMC_BF(TRCD, config->trcd)
                       | SDRAMC_BF(TRAS, config->tras)
                       | SDRAMC_BF(TXSR, config->txsr));
//=0x35ffce59 20100629 Mjan
        if (config->data_bits == SDRAM_DATA_16BIT)
8001c38a:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c38e:       70 08           ld.w    r8,r8[0x0]
8001c390:       59 08           cp.w    r8,16
8001c392:       c0 61           brne    8001c39e <sdram_init+0xda>
                cfgreg |= SDRAMC_BIT(DBW);
8001c394:       ee f8 ff f8     ld.w    r8,r7[-8]
8001c398:       a7 b8           sbr     r8,0x7
8001c39a:       ef 48 ff f8     st.w    r7[-8],r8

        sdramc_writel(CR, cfgreg);
8001c39e:       fe 69 20 08     mov     r9,-122872
8001c3a2:       ee f8 ff f8     ld.w    r8,r7[-8]
8001c3a6:       93 08           st.w    r9[0x0],r8

        /* Send a NOP to turn on the clock (necessary on some chips) */
        sdramc_writel(MR, SDRAMC_MODE_NOP);
8001c3a8:       fe 69 20 00     mov     r9,-122880
8001c3ac:       30 18           mov     r8,1
8001c3ae:       93 08           st.w    r9[0x0],r8
        sdramc_readl(MR);
8001c3b0:       fe 68 20 00     mov     r8,-122880
8001c3b4:       70 08           ld.w    r8,r8[0x0]
        writel(0, sdram_base);
8001c3b6:       ee f9 ff f0     ld.w    r9,r7[-16]
8001c3ba:       30 08           mov     r8,0
8001c3bc:       93 08           st.w    r9[0x0],r8
        //~ udelay(200);

        /*
         * 2. A Precharge All command is issued to the SDRAM
         */
        sdramc_writel(MR, SDRAMC_MODE_BANKS_PRECHARGE);
8001c3be:       fe 69 20 00     mov     r9,-122880
8001c3c2:       30 28           mov     r8,2
8001c3c4:       93 08           st.w    r9[0x0],r8
        sdramc_readl(MR);
8001c3c6:       fe 68 20 00     mov     r8,-122880
8001c3ca:       70 08           ld.w    r8,r8[0x0]
        writel(0, sdram_base);
8001c3cc:       ee f9 ff f0     ld.w    r9,r7[-16]
8001c3d0:       30 08           mov     r8,0
8001c3d2:       93 08           st.w    r9[0x0],r8

        /*
         * 3. Two (was: Eight, 20100629 Mjan) auto-refresh (CBR) cycles are provided, (only two should be necessary)
         */
        sdramc_writel(MR, SDRAMC_MODE_AUTO_REFRESH);
8001c3d4:       fe 69 20 00     mov     r9,-122880
8001c3d8:       30 48           mov     r8,4
8001c3da:       93 08           st.w    r9[0x0],r8
        sdramc_readl(MR);
8001c3dc:       fe 68 20 00     mov     r8,-122880
8001c3e0:       70 08           ld.w    r8,r8[0x0]
        for (i = 0; i < 2; i++)         //Was: i < 8; 20100629 Mjan
8001c3e2:       30 08           mov     r8,0
8001c3e4:       ef 48 ff fc     st.w    r7[-4],r8
8001c3e8:       c0 a8           rjmp    8001c3fc <sdram_init+0x138>
                writel(0, sdram_base);
8001c3ea:       ee f9 ff f0     ld.w    r9,r7[-16]
8001c3ee:       30 08           mov     r8,0
8001c3f0:       93 08           st.w    r9[0x0],r8
        /*
         * 3. Two (was: Eight, 20100629 Mjan) auto-refresh (CBR) cycles are provided, (only two should be necessary)
         */
        sdramc_writel(MR, SDRAMC_MODE_AUTO_REFRESH);
      sdramc_readl(MR);
        for (i = 0; i < 2; i++)         //Was: i < 8; 20100629 Mjan
8001c3f2:       ee f8 ff fc     ld.w    r8,r7[-4]
8001c3f6:       2f f8           sub     r8,-1
8001c3f8:       ef 48 ff fc     st.w    r7[-4],r8
8001c3fc:       ee f8 ff fc     ld.w    r8,r7[-4]
8001c400:       58 78           cp.w    r8,7
8001c402:       fe 98 ff f4     brls    8001c3ea <sdram_init+0x126>
         *    length.
         *
         * The address will be chosen by the SDRAMC automatically; we
         * just have to make sure BA[1:0] are set to 0.
         */
        sdramc_writel(MR, SDRAMC_MODE_LOAD_MODE);
8001c406:       fe 69 20 00     mov     r9,-122880
8001c40a:       30 38           mov     r8,3
8001c40c:       93 08           st.w    r9[0x0],r8
        sdramc_readl(MR);
8001c40e:       fe 68 20 00     mov     r8,-122880
8001c412:       70 08           ld.w    r8,r8[0x0]
        writel(0, sdram_base);
8001c414:       ee f9 ff f0     ld.w    r9,r7[-16]
8001c418:       30 08           mov     r8,0
8001c41a:       93 08           st.w    r9[0x0],r8
        /*
         * 5. The application must go into Normal Mode, setting Mode
         *    to 0 in the Mode Register and performing a write access
         *    at any location in the SDRAM.
         */
        sdramc_writel(MR, SDRAMC_MODE_NORMAL);
8001c41c:       fe 69 20 00     mov     r9,-122880
8001c420:       30 08           mov     r8,0
8001c422:       93 08           st.w    r9[0x0],r8
        sdramc_readl(MR);
8001c424:       fe 68 20 00     mov     r8,-122880
8001c428:       70 08           ld.w    r8,r8[0x0]
        writel(0, sdram_base);
8001c42a:       ee f9 ff f0     ld.w    r9,r7[-16]
8001c42e:       30 08           mov     r8,0
8001c430:       93 08           st.w    r9[0x0],r8

        /*
         * 6. Write refresh rate into SDRAMC refresh timer count
         *    register (refresh rate = timing between refresh cycles).
         */
        sdramc_writel(TR, config->refresh_period);
8001c432:       fe 69 20 04     mov     r9,-122876
8001c436:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c43a:       70 48           ld.w    r8,r8[0x10]
8001c43c:       93 08           st.w    r9[0x0],r8

        if (config->data_bits == SDRAM_DATA_16BIT)
8001c43e:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c442:       70 08           ld.w    r8,r8[0x0]
8001c444:       59 08           cp.w    r8,16
8001c446:       c1 61           brne    8001c472 <sdram_init+0x1ae>
                sdram_size = 1 << (config->row_bits + config->col_bits + config->bank_bits + 1);
8001c448:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c44c:       11 c8           ld.ub   r8,r8[0x4]
8001c44e:       10 99           mov     r9,r8
8001c450:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c454:       11 d8           ld.ub   r8,r8[0x5]
8001c456:       10 09           add     r9,r8
8001c458:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c45c:       11 e8           ld.ub   r8,r8[0x6]
8001c45e:       f2 08 00 08     add     r8,r9,r8
8001c462:       f0 c9 ff ff     sub     r9,r8,-1
8001c466:       30 18           mov     r8,1
8001c468:       f0 09 09 48     lsl     r8,r8,r9
8001c46c:       ef 48 ff f4     st.w    r7[-12],r8
8001c470:       c1 58           rjmp    8001c49a <sdram_init+0x1d6>
        else
                sdram_size = 1 << (config->row_bits + config->col_bits + config->bank_bits + 2);
8001c472:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c476:       11 c8           ld.ub   r8,r8[0x4]
8001c478:       10 99           mov     r9,r8
8001c47a:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c47e:       11 d8           ld.ub   r8,r8[0x5]
8001c480:       10 09           add     r9,r8
8001c482:       ee f8 ff ec     ld.w    r8,r7[-20]
8001c486:       11 e8           ld.ub   r8,r8[0x6]
8001c488:       f2 08 00 08     add     r8,r9,r8
8001c48c:       f0 c9 ff fe     sub     r9,r8,-2
8001c490:       30 18           mov     r8,1
8001c492:       f0 09 09 48     lsl     r8,r8,r9
8001c496:       ef 48 ff f4     st.w    r7[-12],r8

        return sdram_size; /* Returning from here crashes
8001c49a:       ee f8 ff f4     ld.w    r8,r7[-12]
                                                r3: 00000000    r2: 0000003f    r1: 00000000    r0: 00610000
                                                Flags: qvnzc
                                                Mode bits: hrje....G
                                                CPU Mode: Supervisor
*/

8001c49e:       10 9c           mov     r12,r8
8001c4a0:       2f 5d           sub     sp,-44
8001c4a2:       e3 cd 80 80     ldm     sp++,r7,pc

